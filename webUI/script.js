// L·∫•y c√°c ph·∫ßn t·ª≠ DOM
const chatArea = document.getElementById('chatArea');
const chatInput = document.getElementById('chatInput');
const sendBtn = document.getElementById('sendBtn');

const modelSelect = document.getElementById('modelSelect');
const temperatureInput = document.getElementById('temperatureInput');
const uploadGroup = document.getElementById('uploadGroup');
const themeToggleBtn = document.getElementById('themeToggleBtn');

const indexNameInput = document.getElementById('indexNameInput'); // Input for index name
const descriptionInput = document.getElementById('descriptionInput');
const fileInput = document.getElementById('fileInput');
const fileNameSpan = document.getElementById('fileName');
const uploadBtn = document.getElementById('uploadBtn');

API_URL = "https://52.194.241.126:8002/api"

document.addEventListener('DOMContentLoaded', () => {
    const savedChat = localStorage.getItem('chatHistory');
    if (savedChat) {
        chatArea.innerHTML = savedChat;
        chatArea.scrollTop = chatArea.scrollHeight;
    }
});
// H√†m th√™m tin nh·∫Øn v√†o khung chat
function addMessage(sender, text) {
    const messageDiv = document.createElement('div');
    let icon = '';
    if (sender === "B·∫°n") {
        messageDiv.classList.add("message", "user-message");
        icon = `<i class="fas fa-user"></i>`;
    } else if (sender === "Bot") {
        messageDiv.classList.add("message", "bot-message");
        icon = `<i class="fas fa-robot"></i>`;
    } else {
        messageDiv.classList.add("message", "system-message");
    }
    messageDiv.innerHTML = `<div class="message-content">${icon} <span>${text}</span></div>`;
    chatArea.appendChild(messageDiv);
    chatArea.scrollTop = chatArea.scrollHeight;

    // L∆∞u l·ªãch s·ª≠ chat v√†o localStorage
    localStorage.setItem('chatHistory', chatArea.innerHTML);
}

// X·ª≠ l√Ω g·ª≠i tin nh·∫Øn khi click v√†o n√∫t ho·∫∑c nh·∫•n Enter
sendBtn.addEventListener('click', sendMessage);
chatInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
        sendMessage();
    }
});

async function sendMessage() {
    const message = chatInput.value.trim();
    if (message === '') return;
    addMessage('B·∫°n', message);
    chatInput.value = '';

    // Th√™m tin nh·∫Øn "ƒêang nh·∫≠p..." v·ªõi hi·ªáu ·ª©ng t·∫°m th·ªùi
    const loadingMessage = document.createElement('div');
    loadingMessage.classList.add("message", "bot-message");
    loadingMessage.innerHTML = `<div class="message-content"><i class="fas fa-robot"></i> <span>ƒêang nh·∫≠p...</span></div>`;
    chatArea.appendChild(loadingMessage);
    chatArea.scrollTop = chatArea.scrollHeight;

    try {
        const response = await fetch(API_URL + "/ask", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ query: message })
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();
        chatArea.removeChild(loadingMessage); // X√≥a tin nh·∫Øn "ƒêang nh·∫≠p..."
        if (data && data.answer) {
            addMessage('Bot', data.answer);
        } else {
            addMessage('Bot', "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ bot.");
        }
    } catch (error) {
        chatArea.removeChild(loadingMessage);
        addMessage('Bot', "C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn: " + error.message);
    }

}

// Hi·ªÉn th·ªã t√™n file khi ng∆∞·ªùi d√πng ch·ªçn file
fileInput.addEventListener('change', () => {
    const file = fileInput.files[0];
    if (file) {
        const fileExtension = file.name.split('.').pop().toLowerCase();
        if (fileExtension === 'docx' || fileExtension === 'pdf') {
            fileNameSpan.textContent = file.name;
        } else {
            fileInput.value = ""; // Reset file input
            fileNameSpan.textContent = "Vui l√≤ng ch·ªçn file .docx ho·∫∑c .pdf";
            alert("Ch·ªâ cho ph√©p t·∫£i l√™n file .docx ho·∫∑c .pdf");
        }
    } else {
        fileNameSpan.textContent = "Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn";
    }
});

uploadBtn.addEventListener('click', async () => {
    const file = fileInput.files[0];
    const indexName = indexNameInput.value.trim();
    const description = descriptionInput.value.trim();

    if (!file || !indexName || !description) {
        addMessage('H·ªá th·ªëng', "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† ch·ªçn file.");
        return;
    }

    uploadBtn.disabled = true;
    addMessage('H·ªá th·ªëng', `ƒêang upload file: ${file.name}...`);

    // Th√™m thanh ti·∫øn tr√¨nh
    const progressBar = document.createElement('div');
    progressBar.classList.add('progress-bar');
    const progressFill = document.createElement('div');
    progressFill.classList.add('progress-bar-fill');
    progressBar.appendChild(progressFill);
    uploadGroup.appendChild(progressBar);

    const formData = new FormData();
    formData.append('file', file);
    const queryParams = new URLSearchParams({
        index_name: indexName,
        description: description
    }).toString();

    try {
        const response = await fetch(`${API_URL}/index?${queryParams}`, {
            method: 'POST',
            body: formData
        });

        // Gi·∫£ l·∫≠p ti·∫øn tr√¨nh (thay b·∫±ng logic th·ª±c t·∫ø n·∫øu API h·ªó tr·ª£)
        let progress = 0;
        const interval = setInterval(() => {
            progress += 20;
            progressFill.style.width = `${progress}%`;
            if (progress >= 100) clearInterval(interval);
        }, 500);

        if (response.ok) {
            const result = await response.json();
            addMessage('H·ªá th·ªëng', result.message || "T·∫£i t√†i li·ªáu v√† l·∫≠p ch·ªâ m·ª•c th√†nh c√¥ng.");
        } else {
            const errorResult = await response.json();
            addMessage('H·ªá th·ªëng', errorResult.detail || "C√≥ l·ªói x·∫£y ra khi t·∫£i t√†i li·ªáu.");
        }
    } catch (error) {
        addMessage('H·ªá th·ªëng', "C√≥ l·ªói x·∫£y ra: " + error.message);
    } finally {
        uploadBtn.disabled = false;
        setTimeout(() => uploadGroup.removeChild(progressBar), 2000); // X√≥a thanh ti·∫øn tr√¨nh sau 2 gi√¢y
        fileInput.value = "";
        fileNameSpan.textContent = "Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn";
    }
});


const clearChatBtn = document.getElementById('clearChatBtn');

clearChatBtn.addEventListener('click', () => {
    chatArea.innerHTML = '';
    localStorage.removeItem('chatHistory'); // X√≥a l·ªãch s·ª≠ trong localStorage

    const messageDiv = document.createElement('div');
    messageDiv.classList.add("message", "system-message");
    messageDiv.innerHTML = `<div class="message-content"><span>ƒê√£ xo√° to√†n b·ªô n·ªôi dung chat.</span></div>`;
    chatArea.appendChild(messageDiv);
    chatArea.scrollTop = chatArea.scrollHeight;

    setTimeout(() => {
        chatArea.removeChild(messageDiv);
    }, 2000);
});

const scrollTopBtn = document.getElementById('scrollTopBtn');
scrollTopBtn.addEventListener('click', () => {
    chatArea.scrollTo({ top: 0, behavior: 'smooth' });
});

themeToggleBtn.addEventListener('click', () => {
    if (document.body.classList.contains("theme-light")) {
        document.body.classList.remove("theme-light");
        document.body.classList.add("theme-dark");
        themeToggleBtn.textContent = "‚òÄÔ∏è"; // C·∫≠p nh·∫≠t icon
        localStorage.setItem('theme', 'dark'); // L∆∞u theme dark
    } else {
        document.body.classList.remove("theme-dark");
        document.body.classList.add("theme-light");
        themeToggleBtn.textContent = "üåô"; // C·∫≠p nh·∫≠t icon
        localStorage.setItem('theme', 'light'); // L∆∞u theme light
    }
});

document.addEventListener('DOMContentLoaded', () => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('theme-dark');
        themeToggleBtn.textContent = "‚òÄÔ∏è"; // C·∫≠p nh·∫≠t icon
    } else {
        document.body.classList.add('theme-light');
        themeToggleBtn.textContent = "üåô"; // C·∫≠p nh·∫≠t icon
    }
});
