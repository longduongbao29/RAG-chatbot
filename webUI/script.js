// L·∫•y c√°c ph·∫ßn t·ª≠ DOM
const chatArea = document.getElementById('chatArea');
const chatInput = document.getElementById('chatInput');
const sendBtn = document.getElementById('sendBtn');

const modelSelect = document.getElementById('modelSelect');
const temperatureInput = document.getElementById('temperatureInput');
const uploadGroup = document.getElementById('uploadGroup');
const themeToggleBtn = document.getElementById('themeToggleBtn');

const indexNameInput = document.getElementById('indexNameInput'); // Input for index name
const descriptionInput = document.getElementById('descriptionInput');
const fileInput = document.getElementById('fileInput');
const fileNameSpan = document.getElementById('fileName');
const uploadBtn = document.getElementById('uploadBtn');

API_URL = "http://52.194.241.126:8002/api"


// H√†m th√™m tin nh·∫Øn v√†o khung chat
function addMessage(sender, text) {
    const messageDiv = document.createElement('div');
    let icon = '';
    if (sender === "B·∫°n") {
        messageDiv.classList.add("message", "user-message");
        icon = `<i class="fas fa-user"></i>`;
    } else if (sender === "Bot") {
        messageDiv.classList.add("message", "bot-message");
        icon = `<i class="fas fa-robot"></i>`;
    } else {
        messageDiv.classList.add("message", "system-message");
    }
    messageDiv.innerHTML = `<div class="message-content">${icon} <span>${text}</span></div>`;
    chatArea.appendChild(messageDiv);
    // T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi
    chatArea.scrollTop = chatArea.scrollHeight;
}


// X·ª≠ l√Ω g·ª≠i tin nh·∫Øn khi click v√†o n√∫t ho·∫∑c nh·∫•n Enter
sendBtn.addEventListener('click', sendMessage);
chatInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
        sendMessage();
    }
});

function sendMessage() {
    const message = chatInput.value.trim();
    if (message === '') return;
    addMessage('B·∫°n', message);
    chatInput.value = '';

    // G·ª≠i y√™u c·∫ßu ƒë·∫øn API sau khi ng∆∞·ªùi d√πng nh·∫≠p tin nh·∫Øn
    fetch(API_URL + "/ask", { // Thay 'https://api.example.com/chat' b·∫±ng URL API th·ª±c t·∫ø c·ªßa b·∫°n
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query: message }) // G·ª≠i c√¢u h·ªèi (message) d∆∞·ªõi d·∫°ng JSON
    })
        .then(response => response.json()) // Chuy·ªÉn ph·∫£n h·ªìi t·ª´ API th√†nh ƒë·ªëi t∆∞·ª£ng JSON
        .then(data => {
            if (data && data.answer) {
                addMessage('Bot', data.answer); // Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi t·ª´ API
            } else {
                addMessage('Bot', "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ bot.");
            }
        })
        .catch(error => {
            // X·ª≠ l√Ω l·ªói n·∫øu c√≥
            console.error('C√≥ l·ªói x·∫£y ra:', error);
            addMessage('Bot', "C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn.");
        });
}
// Hi·ªÉn th·ªã t√™n file khi ng∆∞·ªùi d√πng ch·ªçn file
fileInput.addEventListener('change', () => {
    const file = fileInput.files[0];
    if (file) {
        const fileExtension = file.name.split('.').pop().toLowerCase();
        if (fileExtension === 'docx' || fileExtension === 'pdf') {
            fileNameSpan.textContent = file.name;
        } else {
            fileInput.value = ""; // Reset file input
            fileNameSpan.textContent = "Vui l√≤ng ch·ªçn file .docx ho·∫∑c .pdf";
            alert("Ch·ªâ cho ph√©p t·∫£i l√™n file .docx ho·∫∑c .pdf");
        }
    } else {
        fileNameSpan.textContent = "Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn";
    }
});

uploadBtn.addEventListener('click', async () => {
    const file = fileInput.files[0];
    const indexName = indexNameInput.value.trim();
    const description = descriptionInput.value.trim();

    if (!file) {
        addMessage('H·ªá th·ªëng', "Vui l√≤ng ch·ªçn file tr∆∞·ªõc khi upload.");
        return;
    }
    if (!indexName || !description) {
        addMessage('H·ªá th·ªëng', "Vui l√≤ng nh·∫≠p t√™n ch·ªâ m·ª•c v√† m√¥ t·∫£.");
        return;
    }

    // Th√™m hi·ªáu ·ª©ng loading v√† v√¥ hi·ªáu h√≥a n√∫t
    uploadBtn.classList.add('loading');
    uploadBtn.disabled = true;
    addMessage('H·ªá th·ªëng', `ƒêang upload file: ${file.name}...`);

    // Prepare query parameters
    const queryParams = new URLSearchParams({
        index_name: indexName,
        description: description
    }).toString();

    // Only include the file in FormData
    const formData = new FormData();
    formData.append('file', file);

    console.log("Query params:", queryParams);
    console.log("FormData contents:");
    for (const [key, value] of formData.entries()) {
        console.log(`${key}: ${value}`);
    }

    try {
        const response = await fetch(`${API_URL}/index?${queryParams}`, {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            const result = await response.json();
            addMessage('H·ªá th·ªëng', result.message || "T·∫£i t√†i li·ªáu v√† l·∫≠p ch·ªâ m·ª•c th√†nh c√¥ng.");
        } else {
            const errorResult = await response.json();
            console.log("Error response:", JSON.stringify(errorResult, null, 2));
            addMessage('H·ªá th·ªëng', errorResult.detail || "C√≥ l·ªói x·∫£y ra khi t·∫£i t√†i li·ªáu.");
        }

        fileInput.value = "";
        fileNameSpan.textContent = "Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn";
    } catch (error) {
        addMessage('H·ªá th·ªëng', "C√≥ l·ªói x·∫£y ra khi t·∫£i t√†i li·ªáu.");
        console.error("Fetch error:", error);
    } finally {
        // X√≥a hi·ªáu ·ª©ng loading v√† k√≠ch ho·∫°t l·∫°i n√∫t (d√π th√†nh c√¥ng hay l·ªói)
        uploadBtn.classList.remove('loading');
        uploadBtn.disabled = false;
    }
});
// X·ª≠ l√Ω chuy·ªÉn theme khi b·∫•m n√∫t
themeToggleBtn.addEventListener('click', () => {
    if (document.body.classList.contains("theme-light")) {
        document.body.classList.remove("theme-light");
        document.body.classList.add("theme-dark");
        themeToggleBtn.textContent = "‚òÄÔ∏è"; // Icon chuy·ªÉn v·ªÅ light
    } else {
        document.body.classList.remove("theme-dark");
        document.body.classList.add("theme-light");
        themeToggleBtn.textContent = "üåô"; // Icon chuy·ªÉn v·ªÅ dark
    }
});

const clearChatBtn = document.getElementById('clearChatBtn');

clearChatBtn.addEventListener('click', () => {
    chatArea.innerHTML = '';

    const messageDiv = document.createElement('div');
    messageDiv.classList.add("message", "system-message");
    messageDiv.innerHTML = `<div class="message-content"><span>ƒê√£ xo√° to√†n b·ªô n·ªôi dung chat.</span></div>`;
    chatArea.appendChild(messageDiv);
    chatArea.scrollTop = chatArea.scrollHeight;

    // T·ª± ƒë·ªông ·∫©n sau 2 gi√¢y
    setTimeout(() => {
        chatArea.removeChild(messageDiv);
    }, 2000);
});
